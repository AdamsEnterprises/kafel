{
  "name": "Kafel",
  "tagline": "A language and library for specifying syscall filtering policies.",
  "body": "# WHAT IS IT?\r\nKafel is a language and library for specifying syscall filtering policies.\r\nThe policies are compiled into BPF code that can be used with seccomp-filter.\r\n\r\nThis is NOT an official Google product.\r\n\r\n# Usage\r\n\r\n## With verbose error reporting\r\n```c\r\nstruct sock_fprog prog;\r\nkafel_ctxt_t ctxt = kafel_ctxt_create();\r\nkafel_set_input_string(ctxt, seccomp_policy);\r\nif (kafel_compile(ctxt, &prog)) {\r\n  fprintf(stderr, \"policy compilation failed: %s\", kafel_error_msg(ctxt));\r\n  kafel_ctxt_destroy(&ctxt);\r\n  exit(-1);\r\n}\r\nkafel_ctxt_destroy(&ctxt);\r\nprctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog, 0, 0);\r\nfree(prog.filter);\r\n```\r\n\r\n## Without verbose error reporting\r\n```c\r\nstruct sock_fprog prog;\r\nif (kafel_compile_string(seccomp_policy, &prog)) {\r\n  fputs(\"policy compilation failed\", stderr);\r\n  exit(-1);\r\n}\r\nprctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog, 0, 0);\r\nfree(prog.filter);\r\n```\r\n\r\n# Policy language\r\n\r\nA simple language is used to define policies.\r\n\r\nA policy file has 3 parts:\r\n 1. Constant definitions (optional)\r\n 2. Policy definitions\r\n 3. Top level policy declaration\r\n\r\n## Numbers\r\n\r\nKafel supports following number notations:\r\n * Decimal `42`\r\n * Hexadecimal `0xfa1`\r\n * Octal `0777`\r\n * Binary `0b10101`\r\n\r\n## Constant definitions\r\n\r\nYou may define numeric constants at the beging of policy file to make it more\r\nreadable.\r\nThe defined constants can then be used anywhere where a number is expected.\r\n\r\n```\r\n#define MYCONST 123\r\n```\r\n\r\n## Policy definitions\r\n\r\nPolicy definition is a list of action blocks and use statements separated by\r\ncommas.\r\n\r\n__samples/__ contains some example policies that demonstrate supported features.\r\n\r\n### Use statements\r\n\r\nA `USE someOtherPolicy` behaves as if `someOtherPolicy` body was pasted in its\r\nplace. You may only use policies defined before the use statement.\r\n\r\nWith use statements you can create meaningful groups of filtering rules that are\r\nbuilding blocks of bigger policies.\r\n\r\n### Action blocks\r\n\r\nAction block consist of a target and list of syscall matching rules separated\r\nwith commas.\r\n\r\nTarget of first rule matched is the policy decision.\r\n\r\nFollowing table list Kafel targets and their corresponding seccomp-filter\r\nreturn values.\r\n\r\nKafel           | seccomp-filter\r\n--------------- | ---------------------------\r\n`ALLOW`         | `SECCOMP_RET_ALLOW`\r\n`KILL`, `DENY`  | `SECCOMP_RET_KILL`\r\n`ERRNO(number)` | `SECCOMP_RET_ERRNO+number`\r\n`TRAP(number)`  | `SECCOMP_RET_TRAP+number`\r\n`TRACE(number)` | `SECCOMP_RET_TRACE+number`\r\n\r\n### Syscall matching rules\r\n\r\nA rules consist of syscall name and optional list of boolean expressions.\r\n\r\nList of boolean expressions separated by commas.\r\nA comma is semantically equivalent to `||` but has the lowest precedence,\r\ntherefore it may be easier to read.\r\n\r\n#### Syscall naming\r\n\r\nNormally syscalls are specified by their names as defined in Linux kernel.\r\nHowever, you may also filter __custom syscalls__ that are not in the standard\r\nsyscall list.\r\nYou can either define a constant and use it in place of syscall name or\r\nutilize `SYSCALL` keyword.\r\n\r\n```\r\n#define mysyscall -1\r\n\r\nPOLICY my_const {\r\n  ALLOW {\r\n    mysyscall\r\n  }\r\n}\r\n\r\nPOLICY my_literal {\r\n  ALLOW {\r\n    SYSCALL[-1]\r\n  }\r\n}\r\n```\r\n\r\n#### Argument filtering\r\n\r\nBoolean expressions are used to filter syscalls based on their arguments.\r\nA expression resembles C language syntax, except that there are no\r\narithmetic operators.\r\n\r\n```\r\nsome_syscall(first_arg, my_arg_name) { first_arg == 42 && my_arg_name != 42 }\r\n```\r\n\r\nBitwise and (`&`) operator can be used to test for flags.\r\n\r\n```\r\nmmap { (prot & PROT_EXEC) == 0 }\r\n```\r\n\r\nYou don't have to declare arguments for well-known syscalls but can just use\r\ntheir regular names as specified in Linux kernel and `man` pages.\r\n\r\n```\r\nwrite { fd == 1 }\r\n```\r\n\r\n## Top level policy declaration\r\n\r\n```\r\nUSE topLevel DEFAULT the_action\r\n```\r\n\r\nSpecifies that `topLevel` policy is compiled and action `the_action` should be\r\ntaken when no rule matches.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}